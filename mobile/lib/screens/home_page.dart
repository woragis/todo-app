import 'package:flutter/material.dart';
import 'package:todo_mobile/utils/todo_list.dart';
import 'package:todo_mobile/services/todo_service.dart';
import 'package:todo_mobile/models/todo_model.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final _controller = TextEditingController();
  final TodoService _todoService = TodoService();

  List todoList = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchTodos();
  }

  Future<void> _fetchTodos() async {
    try {
      final response = await _todoService.fetchTodos();
      setState(() {
        todoList = response.data;
        isLoading = false;
      });
    } catch (e) {
      setState(() {
        isLoading = false;
      });
      print('Error: $e');
    }
  }

  Future<void> _createTodo() async {
    if (_controller.text.isEmpty) {
      // Show an error if fields are empty
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Both title and description are required!')),
      );
      return;
    }

    setState(() {
      isLoading = true;
    });

    try {
      final newTodo = Todo(
        id: 0, // ID will be generated by the backend
        name: _controller.text,
        completed: false,
      );

      final response = await _todoService.createTodo(newTodo);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Todo created: ${response.data.name}')),
      );

      // Clear the text fields after creation
      _controller.clear();

      // Optionally, refresh the list of todos here
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error creating todo: $e')),
      );
    } finally {
      setState(() {
        isLoading = false;
      });
      _fetchTodos();
    }
  }

  Future<void> checkBoxChanged(int index) async {
    final toggleCompletedTodo = Todo(
      id: todoList[index].id,
      name: todoList[index].name,
      completed: !todoList[index].completed,
    );
    try {
      final response = await _todoService.updateTodo(
          todoList[index].id, toggleCompletedTodo);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('Todo completion updated: ${response.data.name}')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error updating todo completion: $e')),
      );
    } finally {
      setState(() {
        todoList[index].toggleCompleted();
      });
    }
  }

  void deleteTask(int index) {
    setState(() {
      todoList.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.deepPurple.shade300,
      appBar: AppBar(
        title: const Text("Simple Todo"),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: todoList.length,
              itemBuilder: (BuildContext context, index) {
                return TodoList(
                  taskName: todoList[index].name,
                  taskCompleted: todoList[index].completed,
                  onChanged: (value) => checkBoxChanged(index),
                  deleteFunction: (context) => deleteTask(index),
                );
              },
            ),
      floatingActionButton: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20),
        child: Row(
          children: [
            Expanded(
              child: Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 0,
                ),
                child: TextField(
                  controller: _controller,
                  decoration: InputDecoration(
                    hintText: "Add new todo",
                    filled: true,
                    fillColor: Colors.deepPurple.shade200,
                    enabledBorder: OutlineInputBorder(
                      borderSide: const BorderSide(
                        color: Colors.deepPurple,
                      ),
                      borderRadius: BorderRadius.circular(15),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderSide: const BorderSide(
                        color: Colors.deepPurple,
                      ),
                      borderRadius: BorderRadius.circular(15),
                    ),
                  ),
                ),
              ),
            ),
            FloatingActionButton(
              onPressed: _createTodo,
              child: const Icon(
                Icons.add,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
